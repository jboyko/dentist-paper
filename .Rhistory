return(volumes)
}
fn_xy(c(9,1), 10)
par <- setNames(c(9,1), c("x", "y"))
sphere_0.0 <- dent_walk(par, fn_xy, 0, value = 10, nsteps = 5000, lower_bound = -Inf, upper_bound = Inf, sphere_probability = 0, sd = 1)
dentist:::plot.dentist(sphere_0.0)
debug(dent_walk)
dentist:::plot.dentist(sphere_0.0)
sphere_0.0 <- dent_walk(par, fn_xy, 0, value = 10, nsteps = 5000, lower_bound = -Inf, upper_bound = Inf, sphere_probability = 0, sd = 1)
all_ranges
final_results
undebug(dent_walk)
dentist:::plot.dentist(sphere_0.0)
devtools::install_github("echasnovski/pdqr")
require(dentist)
fn_xy <- function(par, value){
llik <- ((par[1] + (par[2]^2)) - value)^2
return(llik)
}
getCube <- function(results){
volumes <- vector("numeric", dim(results)[1]-1)
for(i in 2:dim(results)[1]){
new_volume <- prod(apply(results[1:i,-1], 2, function(x) diff(range(x))))
volumes[i-1] <- new_volume
}
return(volumes)
}
fn_xy(c(9,1), 10)
par <- setNames(c(9,1), c("x", "y"))
sphere_0.0 <- dent_walk(par, fn_xy, 0, value = 10, nsteps = 5000, lower_bound = -Inf, upper_bound = Inf, sphere_probability = 0, sd = 1)
dentist:::plot.dentist(sphere_0.0)
sphere_0.0$all_ranges
sphere_0.0$results
new_r(sphere_0.0$results[,2])
new_r
require(pdqr)
new_r(sphere_0.0$results[,2])
new_r(sphere_0.0$results[,2], "continuous")
r <- new_r(sphere_0.0$results[,2], "continuous")
r
rnorm(10)
system.time(rnorm(10))
system.time(rnorm(1000000))
?system.time
require(dentist)
require(pdqr)
fn_xy <- function(par, value){
llik <- ((par[1] + (par[2]^2)) - value)^2
return(llik)
}
getCube <- function(results){
volumes <- vector("numeric", dim(results)[1]-1)
for(i in 2:dim(results)[1]){
new_volume <- prod(apply(results[1:i,-1], 2, function(x) diff(range(x))))
volumes[i-1] <- new_volume
}
return(volumes)
}
fn_xy(c(9,1), 10)
par <- setNames(c(9,1), c("x", "y"))
sphere_0.0 <- dent_walk(par, fn_xy, 0, value = 10, nsteps = 5000, lower_bound = -Inf, upper_bound = Inf, sphere_probability = 0, sd = 1)
dentist:::plot.dentist(sphere_0.0)
x <- seq(from=8, to=-100, length.out=1000)
y1 <- sqrt(8-x)
y2 <- -sqrt(8-x)
y3 <- sqrt(12-x)
y4 <- -sqrt(12-x)
plot(x, y1, type="l", ylim=range(c(y1, y2, y3, y4)))
lines(x, y2)
lines(x, y3)
lines(x, y4)
x <- seq(from=8, to=-100, length.out=1000)
y1 <- sqrt(8-x)
y2 <- -sqrt(8-x)
y3 <- sqrt(12-x)
y4 <- -sqrt(12-x)
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
dentist:::plot.dentist(sphere_0.0)
x <- seq(from=8, to=-100, length.out=1000)
y1 <- sqrt(8-x)
y2 <- -sqrt(8-x)
y3 <- sqrt(12-x)
y4 <- -sqrt(12-x)
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
lines(x, y3, col = "blue")
lines(x, y4, col = "blue")
r <- new_r(sphere_0.0$results[,2], "continuous")
sphere_0.0 <- dent_walk(par, fn_xy, 0, value = 10, nsteps = 5000, lower_bound = -Inf, upper_bound = Inf, sphere_probability = 0, sd = 1)
dentist:::plot.dentist(sphere_0.0)
x <- seq(from=12, to=-50, length.out=1000)
y1 <- sqrt(8-x)
x <- seq(from=12, to=-50, length.out=1000)
y1 <- sqrt(8-x) + 4
y2 <- -sqrt(8-x) + 4
x <- seq(from=8, to=-50, length.out=1000)
y1 <- sqrt(8-x) + 4
y2 <- -sqrt(8-x) + 4
y3 <- sqrt(12-x) + 4
y4 <- -sqrt(12-x) + 4
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
lines(x, y3, col = "blue")
lines(x, y4, col = "blue")
x <- seq(from=8, to=-50, length.out=1000)
y1 <- sqrt(8-x)
y2 <- -sqrt(8-x)
y3 <- sqrt(12-x)
y4 <- -sqrt(12-x)
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
lines(x, y3, col = "blue")
lines(x, y4, col = "blue")
r <- new_r(sphere_0.0$results[,2], "continuous")
dentist:::plot.dentist(sphere_0.0)
x <- seq(from=8, to=-50, length.out=1000)
y1 <- sqrt(8-x)
y2 <- -sqrt(8-x)
y3 <- sqrt(12-x)
y4 <- -sqrt(12-x)
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
lines(x, y3, col = "blue")
lines(x, y4, col = "blue")
x <- seq(from=8, to=-50, length.out=1000)
y1 <- sqrt(8-x)^2
y2 <- -(sqrt(8-x)^2)
y3 <- sqrt(12-x)^2
y4 <- -(sqrt(12-x)^2)
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
lines(x, y3, col = "blue")
lines(x, y4, col = "blue")
dentist:::plot.dentist(sphere_0.0)
x <- seq(from=8, to=-50, length.out=1000)
y1 <- sqrt(8-x)
y2 <- -sqrt(8-x)
y3 <- sqrt(12-x)
y4 <- -sqrt(12-x)
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
lines(x, y3, col = "blue")
lines(x, y4, col = "blue")
y1 <- sqrt(10-x)
y2 <- -sqrt(10-x)
y3 <- sqrt(10-x)
y4 <- -sqrt(10-x)
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
lines(x, y3, col = "blue")
lines(x, y4, col = "blue")
x <- seq(from=8, to=-50, length.out=1000)
y1 <- sqrt(8-x)
y2 <- -sqrt(8-x)
y3 <- sqrt(12-x)
y4 <- -sqrt(12-x)
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
lines(x, y3, col = "blue")
lines(x, y4, col = "blue")
dentist:::plot.dentist(sphere_0.0)
x <- seq(from=8, to=-50, length.out=1000)
y1 <- sqrt(8-x)
y2 <- -sqrt(8-x)
y3 <- sqrt(12-x)
y4 <- -sqrt(12-x)
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
lines(x, y3, col = "blue")
lines(x, y4, col = "blue")
dev.off()
runif(1)
require(reshape2)
require(dentist)
require(ggplot2)
# euclidean distance
euclidean <- function(a, b) sqrt(sum((a - b)^2))
# fit a log normal
dlnorm_to_run <- function(par, sims) {
return(-sum(stats::dlnorm(sims, meanlog=par[1], sdlog=par[2], log=TRUE)))
}
# single simulation which results in a distance calculation for all number of steps
singleRun <- function(npoints, nsteps){
sims <- stats::rlnorm(npoints, meanlog=1, sdlog=3)
optimized_results <- stats::optim(c(meanlog=.5, sdlog=1), dlnorm_to_run, sims=sims)
best_par <- optimized_results$par
best_neglnL <- optimized_results$value
# print(best_par)
sem <- best_par[2]/sqrt(length(sims))
se <- sem*1.96
true_ci <- c(lower = best_par[1] - (se), upper = best_par[1] + (se))
dent_list <- lapply(nsteps, function(x) dent_walk(par=best_par, fn=dlnorm_to_run, best_neglnL=best_neglnL, nsteps=x, print_freq=1e10, sims=sims, delta = 1.92))
estimtaes <- do.call(rbind, lapply(dent_list, function(x) c(x$all_ranges[2,1], x$all_ranges[3,1])))
lower.bound.diff <- estimtaes[,1] - true_ci[1]
upper.bound.diff <- estimtaes[,2] - true_ci[2]
# distances <- apply(estimtaes, 1, function(x) euclidean(true_ci, x))
# names(distances) <- nsteps
# names(lower.bound.diff) <- names(upper.bound.diff) <- nsteps
differences <- data.frame(steps = nsteps, lower = lower.bound.diff, upper = upper.bound.diff)
return(differences)
}
# number of steps for dentist to take
nsteps <- c(10, 50, 100, 500, 1000, 5000)
# number of data points
npoints <- 100
# final data frame
many_sims <- do.call(rbind, lapply(1:100, function(x) singleRun(npoints, nsteps)))
many_sims
require(reshape2)
require(dentist)
require(ggplot2)
## simulations which show that dentist converges on true CI for a lognormal
# euclidean distance
euclidean <- function(a, b) sqrt(sum((a - b)^2))
# fit a log normal
dlnorm_to_run <- function(par, sims) {
return(-sum(stats::dlnorm(sims, meanlog=par[1], sdlog=par[2], log=TRUE)))
}
# single simulation which results in a distance calculation for all number of steps
singleRun <- function(npoints, nsteps){
sims <- stats::rlnorm(npoints, meanlog=1, sdlog=3)
optimized_results <- stats::optim(c(meanlog=.5, sdlog=1), dlnorm_to_run, sims=sims)
best_par <- optimized_results$par
best_neglnL <- optimized_results$value
# print(best_par)
sem <- best_par[2]/sqrt(length(sims))
se <- sem*1.96
true_ci <- c(lower = best_par[1] - (se), upper = best_par[1] + (se))
dent_list <- lapply(nsteps, function(x) dent_walk(par=best_par, fn=dlnorm_to_run, best_neglnL=best_neglnL, nsteps=x, print_freq=1e10, sims=sims, delta = 1.92))
estimtaes <- do.call(rbind, lapply(dent_list, function(x) c(x$all_ranges[2,1], x$all_ranges[3,1])))
lower.bound.diff <- estimtaes[,1] - true_ci[1]
upper.bound.diff <- estimtaes[,2] - true_ci[2]
# distances <- apply(estimtaes, 1, function(x) euclidean(true_ci, x))
# names(distances) <- nsteps
# names(lower.bound.diff) <- names(upper.bound.diff) <- nsteps
differences <- data.frame(steps = nsteps, lower = lower.bound.diff, upper = upper.bound.diff)
return(differences)
}
# number of steps for dentist to take
nsteps <- c(10, 50, 100, 500, 1000, 5000)
# number of data points
npoints <- 100
# final data frame
many_sims <- do.call(rbind, lapply(1:100, function(x) singleRun(npoints, nsteps)))
save(many_sims, file = "2022_dentist/saves/true-example.Rsave")
load("saves/true-example.Rsave")
save(many_sims, file = "2022_dentist/saves/true-example.Rsave")
load("saves/true-example.Rsave")
setwd("2022_dentist")
load("saves/true-example.Rsave")
plot_df <- melt(many_sims, id.vars = c("steps"))
# plotting the results as a simple boxplot
ggplot(plot_df, aes(x = as.factor(steps), y = abs(value), fill = as.factor(variable))) +
xlab("Number of steps taken") +
ylab("Absolute distance to closed form CI") +
geom_boxplot(outlier.shape = NA, width=0.5) +
theme_classic()
require(dentist)
require(pdqr)
fn_xy <- function(par, value){
llik <- ((par[1] + (par[2]^2)) - value)^2
return(llik)
}
getCube <- function(results){
volumes <- vector("numeric", dim(results)[1]-1)
for(i in 2:dim(results)[1]){
new_volume <- prod(apply(results[1:i,-1], 2, function(x) diff(range(x))))
volumes[i-1] <- new_volume
}
return(volumes)
}
fn_xy(c(9,1), 10)
par <- setNames(c(9,1), c("x", "y"))
simple_xy <- dent_walk(par, fn_xy, 0, value = 10, nsteps = 5000, lower_bound = -Inf, upper_bound = Inf, sphere_probability = 0, sd = 1)
dentist:::plot.dentist(simple_xy)
x <- seq(from=8, to=-50, length.out=1000)
y1 <- sqrt(8-x)
y2 <- -sqrt(8-x)
y3 <- sqrt(12-x)
y4 <- -sqrt(12-x)
lines(x, y1, col = "blue")
lines(x, y2, col = "blue")
lines(x, y3, col = "blue")
lines(x, y4, col = "blue")
save(simple_xy, file = "saves/simple_xy.Rsave")
require(dentist)
require(OUwie)
data(tworegime)
#Plot the tree and the internal nodes to highlight the selective regimes:
select.reg<-character(length(tree$node.label))
select.reg[tree$node.label == 1] <- "black"
select.reg[tree$node.label == 2] <- "red"
run1 <- OUwie(phy = tree,data = trait,model=c("OUMV"), get.root.theta = TRUE, algorithm="invert")
pars <- c(t(run1$solution))
pars <- c(pars, run1$theta[,1])
names(pars) <- c("alpha_1", "alpha_2", "sigma.sq_1", "sigma.sq_2", "theta_1", "theta_2", "theta_root")
ouwie_fn <- function(pars.free, pars.fixed, phy, data){
ouwie_res <- OUwie.fixed(tree,trait,model=c("OUMV"), get.root.theta = TRUE, algorithm="three.point",
alpha = pars.fixed, sigma.sq = pars.free[1:2], theta = pars.free[3:5])
lnLik <- ouwie_res$loglik
neg_lnLik <- -lnLik
return(neg_lnLik)
}
neg_lnLik <- ouwie_fn(pars[3:7], pars[1:2], tree, trait)
pars.fixed <- pars[1:2]
pars.free <- pars[3:7]
dent_res <- dent_walk(pars.free, ouwie_fn, neg_lnLik, pars.fixed=pars.fixed, phy=tree, data=trait, nsteps = 1000)
ouwie_example <- dent_walk(pars.free, ouwie_fn, neg_lnLik, pars.fixed=pars.fixed, phy=tree, data=trait, nsteps = 1000)
save(ouwie_example, file = "saves/ouwie_example.Rsave")
load("ouwie_example.Rsave")
load("saves/ouwie_example.Rsave")
dentist:::plot.dentist(dent_res, local.only=TRUE)
dentist:::plot.dentist(ouwie_example, local.only=TRUE)
ouwie_example <- dent_walk(pars.free, ouwie_fn, neg_lnLik, pars.fixed=pars.fixed, phy=tree, data=trait, nsteps = 5000)
# ouwie_example <- dent_walk(pars.free, ouwie_fn, neg_lnLik, pars.fixed=pars.fixed, phy=tree, data=trait, nsteps = 5000)
save(ouwie_example, file = "saves/ouwie_example.Rsave")
load("saves/ouwie_example.Rsave")
dentist:::plot.dentist(ouwie_example, local.only=TRUE)
require(dentist)
require(corHMM)
?corHMM
data(primates)
phy <- multi2di(primates[[1]])
phy$edge.length <- phy$edge.length + 1e-4
data <- primates[[2]]
data <- data[,c(1,2)]
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1)
MK_3state
par <- c(1,1,1,1)
fn_corHMM <- function(par, phy, data, rate.cat){
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1, p = par)
loglik <- corhmm_fit$loglik
neg_loglik <- -loglik
return(neg_loglik)
}
MK_3state$solution
par <- c(0.01689, 0.006224)
names(par) <- c("rate_21", "rate_12")
corhmm_example <- dent_walk(par, fn_corHMM, -MK_3state$loglik, phy = phy, data = data, rate.cat = 1)
save(corhmm_example, file = "saves/corhmm_example.Rsave")
load("saves/corhmm_example.Rsave")
all_results <- corhmm_example$results[-1,]
accepted_results <- corhmm_example$results[-1,][corhmm_example$acceptances,]
round(cor(all_results[,-1]), 3)
round(cor(accepted_results[,-1]), 3)
dentist:::summary.dentist(corhmm_example)
plot(dent_res)
plot(corhmm_example)
# corhmm_example <- dent_walk(par, fn_corHMM, -MK_3state$loglik, phy = phy, data = data, rate.cat = 1)
# save(corhmm_example, file = "saves/corhmm_example.Rsave")
#
load("saves/corhmm_example.Rsave")
require(diversitree)
require(dentist)
convert2Lambda <- function(pars){
if(is.na(pars[1])){
focal_pars <- sample(which(!is.na(pars)), size = 2, replace = FALSE)
if(2 %in% focal_pars & 3 %in% focal_pars){
# mu and div
lambda <- pars[2] + pars[3]
}
if(2 %in% focal_pars & 4 %in% focal_pars){
# mu and turn
lambda <- pars[4] - pars[2]
}
if(2 %in% focal_pars & 5 %in% focal_pars){
# mu and ef
lambda <- pars[2]/pars[5]
}
if(3 %in% focal_pars & 4 %in% focal_pars){
# div and turn
lambda <- (pars[3]+pars[4])/2
}
if(3 %in% focal_pars & 5 %in% focal_pars){
# div and ef
lambda <- pars[3]/(1-pars[5])
}
if(4 %in% focal_pars & 5 %in% focal_pars){
# turn and ef
lambda <- pars[4]/(1+pars[5])
}
}else{
lambda <- pars[1]
}
return(lambda)
}
convert2Mu <- function(pars){
if(is.na(pars[2])){
focal_pars <- sample(which(!is.na(pars)), size = 2, replace = FALSE)
if(1 %in% focal_pars & 3 %in% focal_pars){
# lambda and div
mu <- pars[1] - pars[3]
}
if(1 %in% focal_pars & 4 %in% focal_pars){
# lambda and turn
mu <- pars[4] - pars[1]
}
if(1 %in% focal_pars & 5 %in% focal_pars){
# lambda and ef
mu <- pars[1]*pars[5]
}
if(3 %in% focal_pars & 4 %in% focal_pars){
# div and turn
mu <- (pars[4] - pars[3])/2
}
if(3 %in% focal_pars & 5 %in% focal_pars){
# div and ef
mu <- (pars[3]*pars[5])/(1-pars[5])
}
if(4 %in% focal_pars & 5 %in% focal_pars){
# turn and ef
mu <- (pars[4]*pars[5])/(1+pars[5])
}
}else{
mu <- pars[2]
}
return(mu)
}
convertBetweenPars <- function(pars){
# pars <- c("lambda", "mu", "net.div", "turn", "ef")
if(length(which(!is.na(pars))) >= 3){
warning("More than 2 paramaters are specified. Randomly choosing 2 for the calculations.")
}
if(is.na(pars[1])){
lambda <- convert2Lambda(pars)
}else{
lambda <- pars[1]
}
if(is.na(pars[2])){
mu <- convert2Mu(pars)
}else{
mu <- pars[2]
}
net.div <- lambda - mu
turn <- lambda + mu
ef <- mu/lambda
out <- c(lambda=lambda, mu=mu, net.div=net.div, turn=turn, ef=ef)
if(!setequal(round(out[which(!is.na(pars))], 5), round(pars[which(!is.na(pars))], 5))){
stop("An error occured because the calculated output doesn't match the input. Please check that your input parameters can be combined in a way that is possible.")
}
return(out)
}
## Simulate a tree under a constant rates birth-death model and look at
## the maximum likelihood speciation/extinction parameters:
set.seed(1)
phy <- trees(c(1, .5), "bd", max.taxa=10)[[1]]
lik <- make.bd(phy)
## By default, optimisation gives a lambda close to 0.1 and extremely
## small mu:
fit <- find.mle(lik, c(1, .5))
# remember the change the output of the function to negative loglik
bd_fn <- function(par, phy){
lik <- make.bd(phy)
LnLik <- lik(par)
return(-LnLik)
}
dent_res <- dent_walk(par = coef(fit), bd_fn, best_neglnL = -fit$lnLik, nsteps = 2000, phy=phy, sd = c(1, 0.5))
# add more data
set.seed(1)
phy <- trees(c(1, .5), "bd", max.taxa=1000)[[1]]
## Simulate a tree under a constant rates birth-death model and look at
## the maximum likelihood speciation/extinction parameters:
set.seed(1)
phy <- trees(c(1, .5), "bd", max.taxa=10)[[1]]
lik <- make.bd(phy)
## By default, optimisation gives a lambda close to 0.1 and extremely
## small mu:
fit <- find.mle(lik, c(1, .5))
# remember the change the output of the function to negative loglik
bd_fn <- function(par, phy){
lik <- make.bd(phy)
LnLik <- lik(par)
return(-LnLik)
}
dent_res <- dent_walk(par = coef(fit), bd_fn, best_neglnL = -fit$lnLik, nsteps = 2000, phy=phy, sd = c(1, 0.5))
dent_res_10 <- dent_walk(par = coef(fit), bd_fn, best_neglnL = -fit$lnLik, nsteps = 2000, phy=phy, sd = c(1, 0.5))
dentist:::plot.dentist(dent_res_10)
## Simulate a tree under a constant rates birth-death model and look at
## the maximum likelihood speciation/extinction parameters:
set.seed(1)
phy <- trees(c(1, .5), "bd", max.taxa=10)[[1]]
lik <- make.bd(phy)
## By default, optimisation gives a lambda close to 0.1 and extremely
## small mu:
fit <- find.mle(lik, c(1, .5))
# remember the change the output of the function to negative loglik
bd_fn <- function(par, phy){
lik <- make.bd(phy)
LnLik <- lik(par)
return(-LnLik)
}
dent_res_10 <- dent_walk(par = coef(fit), bd_fn, best_neglnL = -fit$lnLik, nsteps = 2000, phy=phy, sd = c(1, 0.5))
save(dent_res_10, file="dent_res_10")
dentist:::plot.dentist(dent_res_10)
dent_res
coef(fit)
# add more data
set.seed(1)
phy <- trees(c(1, .5), "bd", max.taxa=1000)[[1]]
lik <- make.bd(phy)
## By default, optimisation gives a lambda close to 0.1 and extremely
## small mu:
fit <- find.mle(lik, c(1, .5))
dent_res_1000 <- dent_walk(par = coef(fit), bd_fn, best_neglnL = -fit$lnLik, nsteps = 2000, phy=phy)
save(dent_res_10, file="dent_res_10.Rsave")
save(dent_res_1000, file="dent_res_1000.Rsave")
plot(dent_res_1000)
save(dent_res_10, file="saves/dent_res_10.Rsave")
save(dent_res_1000, file="saves/dent_res_1000.Rsave")
load("saves/dent_res_1000.Rsave")
plot(dent_res_1000)
