require(reshape2)
require(dentist)
require(ggplot2)
# euclidean distance
euclidean <- function(a, b) sqrt(sum((a - b)^2))
# fit a log normal
dlnorm_to_run <- function(par, sims) {
return(-sum(stats::dlnorm(sims, meanlog=par[1], sdlog=par[2], log=TRUE)))
}
dlnorm_to_run_uni <- function(par, sdlog, sims) {
return(-sum(stats::dlnorm(sims, meanlog=par, sdlog=sdlog, log=TRUE)))
}
# single simulation which results in a distance calculation for all number of steps
singleRun <- function(npoints, nsteps){
sims <- stats::rlnorm(npoints, meanlog=1, sdlog=3)
optimized_results <- stats::optim(c(meanlog=.5, sdlog=1), dlnorm_to_run, sims=sims)
best_par <- optimized_results$par
best_neglnL <- optimized_results$value
# print(best_par)
sem <- best_par[2]/sqrt(length(sims))
se <- sem*1.96
true_ci <- c(lower = best_par[1] - (se), upper = best_par[1] + (se))
# dent_list <- lapply(nsteps, function(x) dent_walk(par=best_par, fn=dlnorm_to_run, best_neglnL=best_neglnL, nsteps=x, print_freq=1e10, sims=sims))
dent_list <- lapply(nsteps, function(x) dent_walk(par=best_par[1], fn=dlnorm_to_run_uni, best_neglnL=best_neglnL, nsteps=x, print_freq=1e10, sims=sims, sdlog = best_par[2]))
estimtaes <- do.call(rbind, lapply(dent_list, function(x) c(x$all_ranges[1,1], x$all_ranges[2,1], x$all_ranges[3,1])))
true_table <- data.frame(method = "t-dist", paramater = "mean", gen_value = 1, best = best_par[1], lower.CI = true_ci[1], upper.CI = true_ci[2], row.names = NULL)
dentist_table <- data.frame(method = paste0("dentist_", nsteps), paramater = "mean", gen_value = 1, estimtaes, row.names = NULL)
out <- rbind(true_table, dentist_table)
# lower.bound.diff <- estimtaes[,1] - true_ci[1]
# upper.bound.diff <- estimtaes[,2] - true_ci[2]
# distances <- apply(estimtaes, 1, function(x) euclidean(true_ci, x))
# names(distances) <- nsteps
# names(lower.bound.diff) <- names(upper.bound.diff) <- nsteps
# differences <- data.frame(steps = nsteps, lower = lower.bound.diff, upper = upper.bound.diff)
return(out)
}
# number of steps for dentist to take
nsteps <- c(10, 50, 100, 500, 1000)
# number of data points
npoints <- 100
setwd("dentist-paper")
load("saves/true-example.Rsave")
library(dplyr)
library(tidyr)
library(stringr)
# Add simulation identifier
many_sims$simulation <- rep(1:(nrow(many_sims) / 6), each = 6)
# Calculate absolute differences
many_sims_diff <- many_sims %>%
group_by(simulation, paramater, gen_value) %>%
mutate(
true_lower.CI = lower.CI[method == "t-dist"],
true_upper.CI = upper.CI[method == "t-dist"],
abs_diff_lower = abs(true_lower.CI - lower.CI),
abs_diff_upper = abs(true_upper.CI - upper.CI)
) %>%
ungroup()
many_sims_diff <- many_sims_diff[!many_sims_diff$method == "t-dist",]
many_sims_diff$nsteps <- as.numeric(gsub("dentist_", "", many_sims_diff$method))
# Reshape data to long format
many_sims_diff_long <- many_sims_diff %>%
pivot_longer(cols = c(abs_diff_lower, abs_diff_upper),
names_to = "bound",
values_to = "abs_diff")
# Change bound names to more readable format
many_sims_diff_long$bound <- recode(many_sims_diff_long$bound,
abs_diff_lower = "Lower Bound",
abs_diff_upper = "Upper Bound")
# Plot
ggplot(many_sims_diff_long, aes(x = as.factor(nsteps), y = abs_diff, fill = bound)) +
xlab("Number of steps taken") +
ylab("Absolute distance to closed form CI") +
geom_boxplot(outlier.shape = NA, width = 0.5) +
theme_classic() +
scale_fill_brewer(palette = "Set1")
many_sims_diff_long
many_sims_diff_long
many_sims_diff_long
many_sims
head(many_sims)
dent_1000 <- many_sims[many_sims$method == "dentist_1000",]
t_dist <- many_sims[many_sims$method == "t-dist",]
t_dist
dent_1000
focal_row <- dent_1000[1,]
focal_row
focal_row$best
focal_row$best > focal_row$lower.CI
res <- (focal_row$best > focal_row$lower.CI) & (focal_row$best < focal_row$upper.CI)
res
quick_test <- function(focal_row){
res <- (focal_row$best > focal_row$lower.CI) & (focal_row$best < focal_row$upper.CI)
return(res)
}
apply(dent_1000, 1, quick_test)
focal_row
quick_test <- function(focal_row){
res <- (focal_row[4] > focal_row[5]) & (focal_row[4] < focal_row[6])
return(res)
}
apply(dent_1000, 1, quick_test)
table(apply(dent_1000, 1, quick_test))
table(apply(t_dist, 1, quick_test))
head(dent_1000 <- many_sims[many_sims$method == "dentist_1000",]
t_dist <- many_sims[many_sims$method == "t-dist",]
head(many_sims)
# functions
quickSim <- function(phy, rate_12=0.1, rate_21=0.1, anc = c(0,1)){
Q <- matrix(c(-rate_21, rate_12, rate_21, -rate_12), 2, 2)
data <- corHMM:::simMarkov(phy, Q, anc)$TipStates
data <- data.frame(sp = names(data), d = data)
return(data)
}
paraBoot <- function(phy, data, nboots = 100){
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1)
loglik <- corhmm_fit$loglik
neg_loglik <- -loglik
anc <- corhmm_fit$states[1,]
Q <- corhmm_fit$solution
diag(Q) <- -rowSums(Q, na.rm = TRUE)
boot_dat <- lapply(1:nboots, function(x) corHMM:::simMarkov(phy, Q, anc)$TipStates)
quick_fit <- function(phy, dat){
dat <- data.frame(sp = names(dat), d = dat)
corhmm_fit <- corHMM(phy = phy, data = dat, rate.cat = 1, node.states = "none")
return(corhmm_fit)
}
fits <- mclapply(boot_dat, function(x) try(quick_fit(phy, x)), mc.cores = 10)
fits <- fits[unlist(lapply(fits, class)) == "corhmm"] # remove univariate simulations
refit_pars <- do.call(rbind, lapply(fits, function(x) x$solution[!is.na(x$solution)]))
true_ci <- apply(refit_pars, 2, function(x) quantile(x, c(0.025, 0.5, .975)))
return(true_ci)
}
fn_corHMM <- function(par, phy, data, rate.cat){
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1, p = par)
loglik <- corhmm_fit$loglik
neg_loglik <- -loglik
return(neg_loglik)
}
singleRun <- function(nsteps, tree, data){
corhmm_fit <- corHMM(phy = tree, data = data, rate.cat = 1)
loglik <- corhmm_fit$loglik
best_neglnL <- -loglik
best_par <- corhmm_fit$solution[!is.na(corhmm_fit$solution)]
names(best_par) <- c("rate_12", "rate_21")
true_ci <- paraBoot(tree, data, nboots = 1000)
dent_list <- lapply(nsteps, function(x) dent_walk(par=best_par, fn=fn_corHMM, best_neglnL=best_neglnL, nsteps=x, print_freq=1e10, phy = tree, data = data))
estimtates <- do.call(cbind, lapply(dent_list, function(x) x$all_ranges[1:3,]))
true_table <- data.frame(method = "parametric-bootstrap", paramater = c("rate_12", "rate_21"), gen_value = c(0.1, 0.01), best = true_ci[2,], lower.CI = true_ci[1,], upper.CI = true_ci[3,], row.names = NULL)
dentist_table <- data.frame(method = paste0("dentist_",rep(nsteps, each = 2)), paramater = c("rate_12", "rate_21"), gen_value = c(0.1, 0.01), t(estimtates), row.names = NULL)
out <- rbind(true_table, dentist_table)
return(out)
}
# run
setwd("~/dentist-paper/")
require(dentist)
require(corHMM)
require(parallel)
require(TreeSim)
# well get our pars from here
pars <- c(0.1, 0.1)
ntaxa <- 50
age <- 50
# fits <- mclapply(all_data, function(x) try(singleRun(nsteps, x[[1]], x[[2]])), mc.cores = 20)
# save(fits, file = "saves/corhmm-example-fits.rsave")
load(file = "saves/corhmm-example-fits.rsave")
fits <- fits[unlist(lapply(fits, class)) != "try-error"] # remove univariate simulations
many_sims <- do.call(rbind, fits)
many_sims
# Add simulation identifier
many_sims$simulation <- rep(1:(nrow(many_sims) / 12), each = 12)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
# Calculate absolute differences
many_sims_diff <- many_sims %>%
group_by(simulation, paramater, gen_value) %>%
mutate(
true_lower.CI = lower.CI[method == "parametric-bootstrap"],
true_upper.CI = upper.CI[method == "parametric-bootstrap"],
diff_lower = sqrt((log(true_lower.CI+1) - log(lower.CI+1))^2),
diff_upper = sqrt((log(true_upper.CI+1) - log(upper.CI+1))^2)
) %>%
ungroup()
many_sims_diff <- many_sims_diff[!many_sims_diff$method == "parametric-bootstrap",]
many_sims_diff$nsteps <- as.numeric(gsub("dentist_", "", many_sims_diff$method))
# Reshape data to long format
many_sims_diff_long <- many_sims_diff %>%
pivot_longer(cols = c(diff_lower, diff_upper),
names_to = "bound",
values_to = "abs_diff")
# Change bound names to more readable format
many_sims_diff_long$bound <- recode(many_sims_diff_long$bound,
abs_diff_lower = "Lower Bound",
abs_diff_upper = "Upper Bound")
# Plot
ggplot(many_sims_diff_long, aes(x = as.factor(nsteps), y = (abs_diff), fill = bound)) +
xlab("Number of steps taken") +
ylab("Mean Squared Logarithmic Error") +
geom_boxplot(outlier.shape = NA, width = 0.5) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
coord_cartesian(ylim = c(0, 1.5)) +
facet_wrap(~paramater)
# table 1 results
dent_1000 <- many_sims[many_sims$method == "dentist_1000",]
t_dist <- many_sims[many_sims$method == "parametric-bootstrap",]
dent_1000
t_dist
quick_test <- function(focal_row){
res <- (focal_row[4] > focal_row[5]) & (focal_row[4] < focal_row[6])
return(res)
}
table(apply(dent_1000, 1, quick_test))
table(apply(t_dist, 1, quick_test))
many_sims
# table 1 results
dent_1000_12 <- many_sims[(many_sims$method == "dentist_1000") &
(many_sims$paramater == "rate_12"),]
para_boot_12 <- many_sims[many_sims$method == "parametric-bootstrap" &
(many_sims$paramater == "rate_12"),]
# table 1 results
dent_1000_12 <- many_sims[(many_sims$method == "dentist_1000") &
(many_sims$paramater == "rate_12"),]
para_boot_12 <- many_sims[many_sims$method == "parametric-bootstrap" &
(many_sims$paramater == "rate_12"),]
dent_1000_21 <- many_sims[many_sims$method == "dentist_1000" &
(many_sims$paramater == "rate_21"),]
para_boot_21 <- many_sims[many_sims$method == "parametric-bootstrap" &
(many_sims$paramater == "rate_21"),]
quick_test <- function(focal_row){
res <- (focal_row[4] > focal_row[5]) & (focal_row[4] < focal_row[6])
return(res)
}
table(apply(para_boot_12, 1, quick_test))
table(apply(para_boot_12, 1, quick_test))
table(apply(para_boot_21, 1, quick_test))
table(apply(para_boot_12, 1, quick_test))
table(apply(para_boot_21, 1, quick_test))
84/98
table(apply(dent_1000_12, 1, quick_test))
table(apply(dent_1000_21, 1, quick_test))
97/98
rm(list=ls())
#functions
convert2Lambda <- function(pars){
if(is.na(pars[1])){
focal_pars <- sample(which(!is.na(pars)), size = 2, replace = FALSE)
if(2 %in% focal_pars & 3 %in% focal_pars){
# mu and div
lambda <- pars[2] + pars[3]
}
if(2 %in% focal_pars & 4 %in% focal_pars){
# mu and turn
lambda <- pars[4] - pars[2]
}
if(2 %in% focal_pars & 5 %in% focal_pars){
# mu and ef
lambda <- pars[2]/pars[5]
}
if(3 %in% focal_pars & 4 %in% focal_pars){
# div and turn
lambda <- (pars[3]+pars[4])/2
}
if(3 %in% focal_pars & 5 %in% focal_pars){
# div and ef
lambda <- pars[3]/(1-pars[5])
}
if(4 %in% focal_pars & 5 %in% focal_pars){
# turn and ef
lambda <- pars[4]/(1+pars[5])
}
}else{
lambda <- pars[1]
}
return(lambda)
}
convert2Mu <- function(pars){
if(is.na(pars[2])){
focal_pars <- sample(which(!is.na(pars)), size = 2, replace = FALSE)
if(1 %in% focal_pars & 3 %in% focal_pars){
# lambda and div
mu <- pars[1] - pars[3]
}
if(1 %in% focal_pars & 4 %in% focal_pars){
# lambda and turn
mu <- pars[4] - pars[1]
}
if(1 %in% focal_pars & 5 %in% focal_pars){
# lambda and ef
mu <- pars[1]*pars[5]
}
if(3 %in% focal_pars & 4 %in% focal_pars){
# div and turn
mu <- (pars[4] - pars[3])/2
}
if(3 %in% focal_pars & 5 %in% focal_pars){
# div and ef
mu <- (pars[3]*pars[5])/(1-pars[5])
}
if(4 %in% focal_pars & 5 %in% focal_pars){
# turn and ef
mu <- (pars[4]*pars[5])/(1+pars[5])
}
}else{
mu <- pars[2]
}
return(mu)
}
convertBetweenPars <- function(pars){
# pars <- c("lambda", "mu", "net.div", "turn", "ef")
if(length(which(!is.na(pars))) >= 3){
warning("More than 2 paramaters are specified. Randomly choosing 2 for the calculations.")
}
if(is.na(pars[1])){
lambda <- convert2Lambda(pars)
}else{
lambda <- pars[1]
}
if(is.na(pars[2])){
mu <- convert2Mu(pars)
}else{
mu <- pars[2]
}
net.div <- lambda - mu
turn <- lambda + mu
ef <- mu/lambda
out <- c(lambda=lambda, mu=mu, net.div=net.div, turn=turn, ef=ef)
if(!setequal(round(out[which(!is.na(pars))], 5), round(pars[which(!is.na(pars))], 5))){
stop("An error occured because the calculated output doesn't match the input. Please check that your input parameters can be combined in a way that is possible.")
}
return(out)
}
bd_fn <- function(par, phy){
lik <- make.bd(phy)
LnLik <- lik(par)
return(-LnLik)
}
singleRun <- function(nsteps, phy){
lik <- make.bd(phy)
fit <- find.mle(lik, c(1, .5))
loglik <- fit$lnLik
best_neglnL <- -loglik
best_par <- fit$par
age = max(branching.times(phy))
taxa = length(phy$tip.label)
many_trees <- sim.bd.taxa.age(n = taxa, numbsim = 1000, lambda = best_par[1], mu = best_par[2], age = age)
many_fits <- lapply(many_trees, function(x) find.mle(make.bd(x), c(1,.5)))
many_fits <- do.call(rbind, lapply(many_fits, function(x) x$par))
true_ci <- apply(many_fits, 2, function(x) quantile(x, c(0.025, 0.5, 0.975)))
true_table <- data.frame(method = "parametric-bootstrap", paramater = c("lambda", "mu"), gen_value = c(1, 0.5), best = true_ci[2,], lower.CI = true_ci[1,], upper.CI = true_ci[3,], row.names = NULL)
dent_list <- lapply(nsteps, function(x) dent_walk(par = best_par, bd_fn, best_neglnL = best_neglnL, nsteps = x, phy=phy))
estimtates <- do.call(cbind, lapply(dent_list, function(x) x$all_ranges[1:3,]))
dentist_table <- data.frame(method = paste0("dentist_",rep(nsteps, each = 2)), paramater = c("lambda", "mu"), gen_value = c(1, 0.5), t(estimtates), row.names = NULL)
out <- rbind(true_table, dentist_table)
return(out)
}
# run
setwd("~/dentist-paper/")
set.seed(1)
require(diversitree)
require(dentist)
require(TreeSim)
# save(fits, file = "saves/bd-example-fits.rsave")
load(file = "saves/bd-example-fits.rsave")
many_sims <- do.call(rbind, fits)
# Add simulation identifier
many_sims$simulation <- rep(1:(nrow(many_sims) / 12), each = 12)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
# Calculate absolute differences
many_sims_diff <- many_sims %>%
group_by(simulation, paramater, gen_value) %>%
mutate(
true_lower.CI = lower.CI[method == "parametric-bootstrap"],
true_upper.CI = upper.CI[method == "parametric-bootstrap"],
abs_diff_lower = abs(true_lower.CI - lower.CI),
abs_diff_upper = abs(true_upper.CI - upper.CI)
) %>%
ungroup()
many_sims_diff <- many_sims_diff[!many_sims_diff$method == "parametric-bootstrap",]
many_sims_diff$nsteps <- as.numeric(gsub("dentist_", "", many_sims_diff$method))
# Reshape data to long format
many_sims_diff_long <- many_sims_diff %>%
pivot_longer(cols = c(abs_diff_lower, abs_diff_upper),
names_to = "bound",
values_to = "abs_diff")
# Change bound names to more readable format
many_sims_diff_long$bound <- recode(many_sims_diff_long$bound,
abs_diff_lower = "Lower Bound",
abs_diff_upper = "Upper Bound")
# Plot
ggplot(many_sims_diff_long, aes(x = as.factor(nsteps), y = abs_diff, fill = bound)) +
xlab("Number of steps taken") +
ylab("Absolute distance to bootstrap CI") +
geom_boxplot(outlier.shape = NA, width = 0.5) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
ylim(c(0, 2)) +
facet_wrap(~paramater)
many_sims_diff
many_sims
head(many_sims)
dent_1000_l <- many_sims[(many_sims$method == "dentist_1000") &
(many_sims$paramater == "lambda"),]
para_boot_l <- many_sims[many_sims$method == "parametric-bootstrap" &
(many_sims$paramater == "lambda"),]
dent_1000_m <- many_sims[many_sims$method == "dentist_1000" &
(many_sims$paramater == "mu"),]
para_boot_m <- many_sims[many_sims$method == "parametric-bootstrap" &
(many_sims$paramater == "mu"),]
para_boot_m
dent_1000_m
para_boot_l
dent_1000_l
quick_test <- function(focal_row){
res <- (focal_row[4] > focal_row[5]) & (focal_row[4] < focal_row[6])
return(res)
}
table(apply(para_boot_l, 1, quick_test))
table(apply(para_boot_m, 1, quick_test))
table(apply(dent_1000_l, 1, quick_test))
table(apply(dent_1000_m, 1, quick_test))
table(apply(para_boot_l, 1, quick_test))
table(apply(para_boot_m, 1, quick_test))
table(apply(dent_1000_l, 1, quick_test))
table(apply(dent_1000_m, 1, quick_test))
setwd("~/dentist-paper/")
library(corHMM)
library(phytools)
library(dentist)
# The dataset comes from unpublished empirical work and thus names of species and traits are removed. This dataset is not curated to produce a desired result, but is the most recent example I have of this phenomenon.
# Load data
dat <- read.csv("trait_data.csv")
# Load tree data
tree <- read.tree("tree.tre")
# fit the model
# model_fit <- corHMM(tree, dat, 1)
# save(model_fit, file = "saves/complex-corhmm-model.rsave")
load("saves/complex-corhmm-model.rsave")
fn_corHMM <- function(par, phy, data){
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1, p = par)
loglik <- corhmm_fit$loglik
neg_loglik <- -loglik
return(neg_loglik)
}
p <- sapply(1:max(model_fit$index.mat, na.rm = TRUE), function(x)
na.omit(c(model_fit$solution))[na.omit(c(model_fit$index.mat) == x)][1])
model_fit$index.mat[is.na(model_fit$index.mat)] <- 0
par_names <- c()
for(i in 1:8){
index <- which(model_fit$index.mat == i, arr.ind = TRUE)
from <- rownames(model_fit$index.mat)[index[1]]
to <- colnames(model_fit$index.mat)[index[2]]
par_names[i] <- paste0(from, "_to_", to)
}
par_names <- gsub("\\(", "", par_names)
par_names <- gsub("\\)", "", par_names)
names(p) <- par_names
# dent_res <- dent_walk(par=p, fn=fn_corHMM, best_neglnL=-model_fit$loglik, nsteps=1000, print_freq=1e10, phy = tree, data = dat)
# save(dent_res, file = "saves/dent_res_complex.rsave")
load("saves/dent_res_complex.rsave")
plot(dent_res)
# dent_res$results[,-1] <- log(dent_res$results[,-1])
# plot(dent_res)
head(dent_res$results)
tmp <- dent_res
tmp$results <- tmp$results[,-c(3,5:9)]
dentist:::plot.dentist(tmp)
knitr::opts_chunk$set(echo = TRUE)
library(corHMM)
library(phytools)
library(dentist)
# Load data
dat <- read.csv("trait_data.csv")
# dent_res <- dent_walk(par=p, fn=fn_corHMM, best_neglnL=-model_fit$loglik, nsteps=1000, print_freq=1e10, phy = tree, data = dat)
# save(dent_res, file = "saves/dent_res_complex.rsave")
load("saves/dent_res_complex.rsave")
plot(dent_res)
# dent_res$results[,-1] <- log(dent_res$results[,-1])
# plot(dent_res)
head(dent_res$results)
tmp <- dent_res
tmp$results <- tmp$results[,-c(3,5:9)]
dentist:::plot.dentist(tmp)
# completely randomm stuff i'm doing to examine things
test_mat <- getStateMat4Dat(cor_dat)
focal_model
rate_mat_a <- dropStateMatPars(test_mat$rate.mat, c(2,5))
# dent_res$results[,-1] <- log(dent_res$results[,-1])
# plot(dent_res)
head(dent_res$results)
tmp <- dent_res
tmp$results <- tmp$results[,-c(3,5:9)]
dentist:::plot.dentist(tmp)
head(dent_res$results)
tmp <- dent_res
tmp$results <- tmp$results[,-c(3,5:9)]
dentist:::plot.dentist(tmp)
tmp <- dent_res
tmp$results <- tmp$results[,-c(2,4,5,6,8)]
dentist:::plot.dentist(tmp)
print(model_fit$solution)
print(model_fit$loglik)
print(model_fit$solution)
print(rate_mat_a)
test_mat <- getStateMat4Dat(model_fit$data)
rate_mat_a <- dropStateMatPars(test_mat$rate.mat, c(2,5))
print(rate_mat_a)
tmp_a <- corHMM(tree, model_fit$data, 1, rate_mat_a)
